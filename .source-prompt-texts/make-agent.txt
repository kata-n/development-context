1. 共通する構造と要素

(1) 役割・自己定義の明示
各プロンプトは最初に自身の役割、特性、目的を明確に規定している。
「専門家エンジニア」「編集者」「AIエージェント」など、具体的な役割を明記。
得意分野や対応可能なタスクを簡潔に提示。

(2) タスク実行プロセスの定義
タスクを実行するためのプロセスが具体的なステップやループとして明記されている。
課題分析 → 計画立案 → 実行 → 結果報告という反復ループ。
明確なワークフローに従い、各ステップで必要な行動を明示的に指示。

(3) 使用可能なツール・制約条件の明示
タスク遂行にあたって使えるツール、制約、環境が詳細に明記されている。
環境の特徴や制限（ブラウザ内環境、利用可能なコマンド、データベースなど）が具体的に提示されている。
使用禁止事項（ネイティブバイナリや特定ライブラリの禁止など）を明記。

(4) 品質・セキュリティ基準の明示
成果物の品質、セキュリティ要件、データ保護要件が明確に設定されている。
データ損失を防ぐための禁止操作（DROP、DELETEなど）。
セキュリティ基準としての認証・権限管理（Row Level Securityの必須化など）。

(5) コーディングスタイルやベストプラクティス
コードを書く場合、スタイルやプラクティスに関する明確な指示が含まれる。
コーディング規約（インデント、ファイル命名規則など）の指定。
レスポンシブデザインやアクセシビリティ要件を具体的に提示。

2. 注目すべき特徴

(1) エージェント型構造（Agent Loop）
多くのプロンプトがエージェント型のループを持つ構造を採用。
タスクを「分析 → 道具選択 → 実行 → 観察 → 報告」といった明確な循環プロセスで定義し、繰り返し改善していくことを重視。

(2) 明確な責任と役割分担
エージェントの各役割（プランナー、エグゼキューター、レビューワー）を明確にし、それぞれの役割が行うべきことを具体的に定義。
作業を細分化し、責任の範囲を明確に設定することで、混乱やミスを防止。

(3) 明示的で具体的な指示・ガイドライン
すべてのタスクやコマンドが具体的かつ明示的に指示されているため、曖昧さを排除し作業品質を担保。
各種制限や利用可能なリソースを前提条件として明確に定義し、作業環境の整合性を保つ。

(4) ベストプラクティスの遵守
セキュリティ要件（データ整合性、RLS）を明確に規定。
コーディングにおいてもテストや型安全性を推奨するなど、常に品質向上のベストプラクティスを重視。

(5) インタラクティブなコミュニケーションと迅速なフィードバックループ
ユーザーとの積極的な対話を促し、フィードバックを通じて迅速に調整・改善。
問題発生時は即座にユーザーに連絡し、必要に応じて修正や追加情報をリクエストする。

3. 全体的な傾向・共通性のまとめ
これらのシステムプロンプトの共通した傾向として、次のような点が挙げられる。

役割と責任の明確化
エージェントがどのような作業を行うべきか、詳細な役割分担が明記されている。

反復的改善プロセス
タスクを小さなステップに分割し、それを繰り返し実行・評価・修正するループ構造。

具体的な制約と基準の設定
環境の制約や利用可能なツールを具体的に規定し、作業範囲を明確化。

品質・セキュリティの徹底
データの安全性、コードの保守性やアクセシビリティを常に考慮した作業指針。
ユーザーとの積極的コミュニケーション
問題の早期発見・修正やフィードバックによる調整を通じて品質を高めるインタラクティブ性。

以上が、卓越したプロンプトに共通する構造的特徴と注目すべきポイントのまとめです。